name: Deploy to GCP

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
    branches:
      - main

env:
  GCP_HOST: '34.57.145.110'
  GCP_USER: 'udaykiran'
  DEPLOYMENT_PATH: '~/learnlab'
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/learnlab-backend
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    name: Deploy to GCP
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > ~/.ssh/gcp_key
          chmod 600 ~/.ssh/gcp_key

      - name: Deploy to GCP
        env:
          SSH_COMMAND: "ssh -i ~/.ssh/gcp_key -o StrictHostKeyChecking=no ${{ env.GCP_USER }}@${{ env.GCP_HOST }}"
          SCP_COMMAND: "scp -i ~/.ssh/gcp_key -o StrictHostKeyChecking=no"
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Create deployment directory
          ${{ env.SSH_COMMAND }} "mkdir -p ${{ env.DEPLOYMENT_PATH }}"
          
          # Check and install Docker
          ${{ env.SSH_COMMAND }} '
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=arm64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
              sudo usermod -aG docker $USER
            else
              echo "Docker is already installed"
            fi
          '
          
          # Create environment file
          cat > .env.prod << EOL
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          JWT_ALGORITHM=${{ secrets.JWT_ALGORITHM }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          GITHUB_SHA=$IMAGE_TAG
          DEBUG=False
          ENVIRONMENT=production
          EOL
          
          # Copy files to GCP
          ${{ env.SCP_COMMAND }} docker-compose.prod.yml ${{ env.GCP_USER }}@${{ env.GCP_HOST }}:${{ env.DEPLOYMENT_PATH }}/
          ${{ env.SCP_COMMAND }} .env.prod ${{ env.GCP_USER }}@${{ env.GCP_HOST }}:${{ env.DEPLOYMENT_PATH }}/.env
          
          # Deploy
          ${{ env.SSH_COMMAND }} "cd ${{ env.DEPLOYMENT_PATH }} && \
            docker-compose -f docker-compose.prod.yml pull && \
            docker-compose -f docker-compose.prod.yml up -d"
          
      - name: Verify Deployment
        env:
          SSH_COMMAND: "ssh -i ~/.ssh/gcp_key -o StrictHostKeyChecking=no ${{ env.GCP_USER }}@${{ env.GCP_HOST }}"
        run: |
          sleep 30  # Wait for services to start
          ${{ env.SSH_COMMAND }} "cd ${{ env.DEPLOYMENT_PATH }} && \
            docker-compose -f docker-compose.prod.yml ps && \
            curl -f http://localhost:8000/health || exit 1"